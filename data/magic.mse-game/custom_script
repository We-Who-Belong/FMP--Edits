## this file won't ever be updated
## you can safely made overwrites to the mse script here

### override cc_filter with one that lets you use JUST ABOUT ANYTHING as card codes for sorts
cc_filter := replace@(match:"^[' ''-''—''*'A-Za-z]\{2,7}[0-9]+[' ''-''—''#']\{1,3}(?!$)", replace:"")

### auto-pronoun stuff
### this-it over "this/that creature"
### assignable legend name

### auto-pronoun stuff
name_this_that := {
base := this_or_that(input, upper:upper)
first := filter_text(base, match:"[a-z]* ")
first := substring(first, end:(length(first)-1))

if ((first == "This" or first == "this") and has_pronouns()) then base := legend_filter(strip_card_codes(card_name))
base
}

pn_this_it := {
base := this_it(input, upper:upper)
first := base
# first := filter_text(base, match:"[a-z]* ")
# first := substring(first, end:(length(first)-1))
if ((first == "This" or first == "this") and has_pronouns()) then base := pronouns("subj")
base
}@(upper:false)

prn_this_that := {
base := this_or_that(input, upper:upper)
first := filter_text(base, match:"[a-z]* ")
first := substring(first, end:(length(first)-1))
if ((first == "This" or first == "this") and contains(card.super_type, match:"Legendary") and has_pronouns()) then base := pronouns("subj")
base
}@(upper:false)

pn_this_that := { prn_this_that(input, upper:upper) }@(upper:false)
pn_this_or_that := { prn_this_that(input, upper:upper) }@(upper:false)
name_this_or_that := { name_this_that(input, upper:upper) }@(upper:false)

has_pronouns := { 
# if you have two-to-four defined, or use one of the 'basic' four (...i don't know neopronouns; this is a personal failing)
contains(card.notes, match:"!pn,([a-z]*),([a-z]*),([a-z]*)") 
or contains(card.notes, match:"!pn,([a-z]*),([a-z]*),([a-z]*),([a-z]*)") 
or contains(card.notes, match:"!pn,she") 
or contains(card.notes, match:"!pn,he") 
or contains(card.notes, match:"!pn,it") 
or contains(card.notes, match:"!pn,they") 
}

filter_pronouns := { 
default := ""
out := filter_text(card.notes, match:"!pn,([a-z]*),([a-z]*)?,?([a-z]*)?")
if (pull_comma_array(out, cell:2) == 0)
	then default := pull_comma_array(out, cell:1)
	if default == "he"
		then out := "!pn,he,him,his,his,"
	else if default == "she"
		then out := "!pn,she,her,her,hers,"
	else if default == "they"
		then out := "!pn,they,them,their,theirs,"
	else if default == "it"
		then out := "!pn,it,it,its,its,"
out
}
# mse 2.3.1+ only, and i didn't test it
# else if (contains(card.super_type, match:"Legendary") and use_vorthos()) then string := replace(card.extra_card_field.vorthos_box, match:"/", replace:","

pronouns := { 
# subjective (he, she, they, it), objective (him, her, it, them), possessive (his, hers, its, theirs)
val := 1
if (input == "subj" or input == "he" or input == "she" or input == "they" or input == "1" or input == 1) then val := 1
else if (input == "obj" or input == "him" or input == "her" or input == "them" or input == "2" or input == 2) then val := 2
else if (input == "poss" or input == "his" or input == "her" or input == "their" or input == "3" or input == 3) then val := 3
else if (input == "pos2" or input == "his" or input == "hers" or input == "theirs" or input == "4" or input == 4) then val := 4

if has_pronouns() then string := filter_pronouns()
else string := "!pn,it,it,its,its,"

pull_comma_array(string, cell:val) }

# and this, of course, to make it more legible
all_prn :=    { pronouns(1) + " " + pronouns(2) + " " + pronouns(3) + " " + pronouns(4) }

pn := {pronouns(input)}
prn := {pronouns(input)}
pn1   := {pronouns("1")}
pn2   := {pronouns("2")}
pn3   := {pronouns("3")}
pnhe  := {pronouns("1")}
pnhim := {pronouns("2")}
pnhis := {pronouns("3")}
pnshe := {pronouns("1")}
pnher := {pronouns("2")}
prsub := {pronouns("1")}
probj := {pronouns("2")}
pnsub := {pronouns("1")}
pnobj := {pronouns("2")}
subject := {pronouns("1")}
object := {pronouns("2")}
# i don't actually know which name belongs to which part-of-speech form of the pronouns
# however, pronoun-3, possessive is used in magic syntactically plenty
# i do not think pronoun-4, which is also possessive, is utilized, however.
# that's why my contains() match doesn't actually have it :V
pronoun1 :=     { pronouns("1") }
sub_pro :=      { pronouns("1") }
sub_pronoun :=  { pronouns("1") }
sub_noun :=     { pronouns("1") }
subjective :=   { pronouns("1") }
pronoun2 :=     { pronouns("2") }
obj_pro :=      { pronouns("2") }
obj_pronoun :=  { pronouns("2") }
obj_noun :=     { pronouns("2") }
objective :=    { pronouns("2") }
pronoun3 :=     { pronouns("3") }
poss_pro :=     { pronouns("3") }
poss_pronoun := { pronouns("3") }
poss_noun :=    { pronouns("3") }
possessive :=   { pronouns("3") }
pronoun4 :=     { pronouns("4") }
pos2_pro :=     { pronouns("4") }
pos2_pronoun := { pronouns("4") }
pos2_noun :=    { pronouns("4") }
possessive2 :=  { pronouns("4") }


### this-it over "this/that creature"
# i frequently find myself wanting to use "this" over "this creature" and "it" over "that creature" because it's.. shorter.
# so an automated short would be nice.
this_it := {
	this := "this"
	that := "it"
	type := input
	if input == "type" then type := to_lower(main_type(card.type))
	else if is_creaturish(card.type) then type := "creature"
	if type == "" then type := "permanent"
	if upper then (
		this := "This"
		that := "It"
	)
	if(type == "land" and not is_land(card.type)) then type := "permanent"
	this_that := this
	if ((input == "creature" and not is_creaturish(card.type)) or is_spell(card.type))
		then this_that := that
	this_that
}@(upper:false)

name_this_it := {
base := this_it(input, upper:upper)
first := base
# first := filter_text(base, match:"[a-z]* ")
# first := substring(first, end:(length(first)-1))
if ((first == "This" or first == "this") and has_pronouns()) then base := legend_filter(strip_card_codes(card_name))
base
}@(upper:false)

### assignable legend name
# truncates the name of legends
legend_filter := {
lgnm := "!name,Default;"
if not(match(card.notes, match:"!name,([A-Za-z ]*);")) then 
	lgnm := replace(input, match:"(, | of | the | \"| “).*", replace: "" )
else (
	# lgnm := filter_text(card.notes, match:"!name,([A-z ]*);", replace:"\\1") )
	lgnm := filter_text(card.notes, match:"!name,([A-z ]*);")
	lgnm := substring(lgnm, begin:6, end:(length(lgnm)-1)) )
	# lgnm := replace(lgnm, match:"!name," replace: "")
	# lgnm := replace(lgnm, match:";" replace: "") ) # <- this ) is for the "else ("
}
# legend_filter := replace@(match:"(, | of | the | \"| “).*", replace: "" )
# legend_filter := replace@(match:"(, | of | the | \" | “ | [_] ).*", replace: "" )
